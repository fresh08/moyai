#pragma once

const static char default_pixel_shader[] = 
	"Texture2D g_inputTexture : register(t0);\n"
	"SamplerState g_inputSampler : register(s0);\n"
	"struct VS_Output\n"
	"{\n"
	"   float4 pos : SV_POSITION;\n"
	"   float4 color : COLOR0;\n"
	"   float2 uv : TEXCOORD0;\n"
	"};\n"
	"struct PS_Output\n"
	"{\n"
	"   float4 color : SV_Target;\n"
	"};\n"
	"cbuffer Matrices : register(b0)\n"
	"{\n"
	"   float4x4 ModelView;\n"
	"   float4x4 Projection;\n"
	"   float4x4 MVP;\n"
	"}\n"
	"PS_Output PSMain(VS_Output input)\n" 
	"{\n"
	"   PS_Output output;\n"
	"	float4 pixel = g_inputTexture.Sample(g_inputSampler, input.uv);\n"
	"	output.color = pixel * input.color;\n"
	"   if (output.color.w == 0.0f) discard;\n"
	"   return output;\n"
	"}\n";

const static char default_vertex_shader[] = 
	"struct VS_Input\n"
	"{\n"
	"   float3 pos : POSITION;\n"
	"   float2 uv : TEXCOORD0;\n"
	"   float4 color : COLOR0;\n"
	"};\n"
	"struct VS_Output\n"
	"{\n"
	"   float4 pos : SV_POSITION;\n"
	"   float4 color : COLOR0;\n"
	"   float2 uv : TEXCOORD0;\n"
	"};\n"
	"cbuffer Matrices : register(b0)\n"
	"{\n"
	"   float4x4 ModelView;\n"
	"   float4x4 Projection;\n"
	"   float4x4 MVP;\n"
	"}\n"
	"VS_Output VSMain(VS_Input input)\n"
	"{\n"
	"   VS_Output output;\n"
	"   output.color = input.color;\n"
	"   output.uv = input.uv;\n"
	"   float3 pos = mul(input.pos, MVP);\n"
	"   output.pos = float4(pos, 1.0f);\n"
	"   return output;\n"
	"}\n";

const static char instancing_vertex_shader[] = 
	"struct VS_Input\n"
	"{\n"
	"   float3 pos : POSITION;\n"
	"   float2 uv : TEXCOORD0;\n"
	"   float4 color : COLOR0;\n"
	"   float4 offsetScale : TEXCOORD1;\n"
	"   float4 uvOffsetScale : TEXCOORD2;\n"
	"   float2 rotationDepth : TEXCOORD3;\n"
	"};\n"
	"struct VS_Output\n"
	"{\n"
	"   float4 pos : SV_POSITION;\n"
	"   float4 color : COLOR0;\n"
	"   float2 uv : TEXCOORD0;\n"
	"};\n"
	"struct PS_Output\n"
	"{\n"
	"   float4 color : SV_Target;\n"
	"};\n"
	"cbuffer Matrices : register(b0)\n"
	"{\n"
	"   float4x4 ModelView;\n"
	"   float4x4 Projection;\n"
	"   float4x4 MVP;\n"
	"}\n"
	"VS_Output VSMain(VS_Input input)\n"
	"{\n"
	"   VS_Output output;\n"
	"   output.color = input.color;\n"
	"   float2 uv = input.uv;\n"
	"   uv -= 0.5f;\n"
	"   uv *= sign(input.uvOffsetScale.zw);\n"
	"   uv += 0.5f;\n"
	"   uv *= abs(input.uvOffsetScale.zw);\n"
	"   uv += input.uvOffsetScale.xy;\n"
	"   output.uv = uv;\n"
	"   float3 pos = float3(input.pos.xy, 1.0f);\n"
	"   float2 offset = input.offsetScale.xy;\n"
	"   float2 scale = input.offsetScale.zw;\n"
	"   float2 rotSinCos;\n"
	"   sincos(input.rotationDepth.x, rotSinCos.x, rotSinCos.y);\n"
	"   float3x2 transform = \n"
	"   { \n"
	"       scale.x * rotSinCos.y, scale.y * rotSinCos.x, \n"
	"      -scale.x * rotSinCos.x, scale.y * rotSinCos.y, \n"
	"      offset.x, offset.y, \n"
	"   };\n"
	"   pos.xy = mul(pos, transform);"
	"   float4 projPos = float4(pos.xy, input.rotationDepth.y * 0.01f, 1.0f);\n"
	"   output.pos = mul(projPos, Projection);\n"
	"   return output;\n"
	"}\n";

const static char primitive_shader[] = 
	"struct VS_Input\n"
	"{\n"
	"   float3 pos : POSITION;\n"
	"   float4 color : COLOR0;\n"
	"};\n"
	"struct VS_Output\n"
	"{\n"
	"   float4 pos : SV_POSITION;\n"
	"   float4 color : COLOR0;\n"
	"};\n"
	"struct PS_Output\n"
	"{\n"
	"   float4 color : SV_Target;\n"
	"};\n"
	"cbuffer Matrices : register(b0)\n"
	"{\n"
	"   float4x4 ModelView;\n"
	"   float4x4 Projection;\n"
	"   float4x4 MVP;\n"
	"}\n"
	"VS_Output VSMain(VS_Input input)\n"
	"{\n"
	"   VS_Output output;\n"
	"   float3 pos = mul(input.pos, MVP);\n"
	"   output.pos = float4(pos, 1.0f);\n"
	"   output.color = input.color;\n"
	"   return output;\n"
	"}\n"
	"PS_Output PSMain(VS_Output input)\n" 
	"{\n"
	"   PS_Output output;\n"
	"   output.color = input.color;\n"
	"   return output;\n"
	"}\n";

const static char replacer_pixel_shader[] = 
	"Texture2D g_inputTexture : register(t0);\n"
	"SamplerState g_inputSampler : register(s0);\n"
	"struct VS_Output\n"
	"{\n"
	"   float4 pos : SV_POSITION;\n"
	"   float4 color : COLOR0;\n"
	"   float2 uv : TEXCOORD0;\n"
	"};\n"
	"struct PS_Output\n"
	"{\n"
	"   float4 color : SV_Target;\n"
	"};\n"
	"cbuffer ReplaceValues : register(b1)\n"
	"{\n"
	"   float4 color1;\n"
	"   float4 replace1;\n"
	"	float eps;\n"
	"}\n"
	"PS_Output PSMain(VS_Output input)\n" 
	"{\n"
	"   PS_Output output;\n"
	"	float4 pixel = g_inputTexture.Sample(g_inputSampler, input.uv);\n"
	"	if(pixel.r > color1.r - eps && pixel.r < color1.r + eps && pixel.g > color1.g - eps && pixel.g < color1.g + eps && pixel.b > color1.b - eps && pixel.b < color1.b + eps )\n"
	"   {\n"
	"		pixel = float4(replace1.xyz, pixel.a);\n"
	"   }\n"
	"	output.color = pixel * input.color;\n"
	"   return output;\n"
	"}\n";
